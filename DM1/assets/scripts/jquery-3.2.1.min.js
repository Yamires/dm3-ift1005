const ShopJSON = new GetXHR;
ShopJSON.open('GET', './data/products.json');
let DataShopJSON;

ShopJSON.onload = function(){init()}

function GetXHR() {
    let xhrData;
    if(window.XMLHttpRequest){
        xhrData = new XMLHttpRequest();
    }
    else{
        console.error("Browser does not support XMLHttpRequest");
        xhrData = false;
    }
    return xhrData;
}

function init() {

    DataShopJSON = JSON.parse(ShopJSON.responseText);

    updateShoppingCartPopUp();

    if (ShopJSON.status >= 200 && ShopJSON.status < 300) {

        // Vérifie si la page courante est products.html
        if (window.location.pathname.includes('products.html')) {
            // ajouter eventListener pour chaque produit

            $('.product').each(function() {
                $('.product').on('click', function() {
                    const productId = $(this).attr('id');

                    if (DataShopJSON.hasOwnProperty(productId)) {
                        // Rediger vers product.html avec bon id
                        window.location.href = `product.html?id=${productId}`;
                    } else {
                        console.error('ID du produit non trouvé dans les données JSON.');
                    }
                });
            });

            // Créer le catalogue en utilisant la fonction createProductsPage
            createProductsPage(DataShopJSON);

        } else if (window.location.pathname.includes('product.html')) {
            //get id from url paramaters
            const urlParams = new URLSearchParams(window.location.search);
            const productId = urlParams.get('id');
            const productData = DataShopJSON.products.find(product => String(product.id) === productId);

            if (productData) {
                createProductPage(productData);
            } else {
                console.error('ID du produit non trouvé dans les données JSON.');
                $('#product').html('<h2>Page non trouvé!</h2>');
            }
        }
    } else {
        console.error('Erreur lors du chargement des données JSON.');
    }
}

ShopJSON.onerror = function () {
    console.error('Erreur lors de la requête vers le fichier JSON.');
};

ShopJSON.send();

// fonction indépendantes
// utilise handleBars, mais peut être facilement changé pour utiliser une autre méthode
function createProductsPage(data) {
    const templateProducts = document.getElementById('products-list-inner').innerHTML;
    const compiledTemplate = Handlebars.compile(templateProducts);
    const ourGeneratedHTML = compiledTemplate(data);
    const productList = document.getElementById('products-list');
    productList.innerHTML = ourGeneratedHTML;
}
// utilise handleBars, mais peut être facilement changé pour utiliser une autre méthode
function createProductPage(data) {
    const templateProduct = document.getElementById('product-inner').innerHTML;
    const compiledTemplate2 = Handlebars.compile(templateProduct);
    const ourGeneratedHTML2 = compiledTemplate2(data);
    const productData = document.getElementById('product');
    productData.innerHTML = ourGeneratedHTML2;
}

// Mettre à jour .class = selected
$(document).ready(function() {
    var buttons = $("#product-criteria .btn");
    buttons.click(function() {
        buttons.removeClass("selected");
        $(this).addClass("selected");});
    // Par défault
    buttons.first().addClass("selected");
});

$(document).ready(function() {
    var buttons = $("#product-categories .btn");
    buttons.click(function() {
        buttons.removeClass("selected");
        $(this).addClass("selected");});
    //Par défaut
    buttons.last().addClass("selected");
});

// mettre à jour le nombre total dans le panier .count
function updateShoppingCartPopUp(){

    const quantity = updateQuantity()

    if (quantity > 0) {
        $('#shoppingCount').addClass('count').text(quantity);
    }
    else {
        $('#shoppingCount').removeClass('count').empty();
    }
}

// ajout items dans le local storage
function addItemToSC(itemID, quantity) {
    let actualData = localStorage.getItem(itemID);
    if (actualData != null){
        localStorage.setItem(itemID, Number(actualData) + Number(quantity));
    }
    else {
        localStorage.setItem(itemID,quantity);
    }
}

function removeItemFromSC(itemId, quantity) {
        let actualData = localStorage.getItem(itemId);
        if (actualData != null){
            localStorage.removeItem(itemId, Number(actualData) + Number(quantity));
        }
        else {
            console.alert("Error");
        }
}

// TODO: méthode pour clear all
// TODO: la fonction pour effacer juste un produit dans le local storage

function updateQuantity() {
    let itemInSC = localStorage.length;
    let quantity = 0
    for(let i = 0; i < itemInSC; i++){
        var key = localStorage.key(i);
        let value = localStorage.getItem(key);
        quantity += Number(value);
    }
    return quantity;
}


function addProduct() {
    const productId = new URLSearchParams(window.location.search).get('id');
    const quantity = $("#product-quantity").val();

    addItemToSC(productId, quantity);
    updateShoppingCartPopUp()
}

// fonction de triages
function sortProductsByCategory(category) {
    if (category) {
        const filteredProducts = DataShopJSON.products.filter(product => String(product.category) === category);

        updateProductDisplay(filteredProducts);
    }
    else{
        updateProductDisplay(DataShopJSON.products, '13')
    }
}
function sortByName(order) {
    // Retourner un nouveau tableau trié par nom
    return DataShopJSON.products.slice().sort((a, b) => {
        const nameA = a.name.toUpperCase();
        const nameB = b.name.toUpperCase();

        if (order === 'asc') {
            return nameA.localeCompare(nameB);
        } else {
            return nameB.localeCompare(nameA);
        }
    });
}

function sortByPrice(order) {
    // Retourner un nouveau tableau trié par prix
    return DataShopJSON.products.slice().sort((a, b) => {
        if (order === 'asc') {
            return a.price - b.price;
        } else {
            return b.price - a.price;
        }
    });
}

function sortProducts(order, sortBy) {
    let sortedProducts;

    if (sortBy === 'name') {
        sortedProducts = sortByName(order);
    } else if (sortBy === 'price') {
        sortedProducts = sortByPrice(order);
    } else {
        console.error('Critère de tri non pris en charge');
        return;
    }
    // Mettre à jour la page avec les produits triés
    createProductsPage({ products: sortedProducts });
}

function updateProductDisplay(products) {
    $('#products-count').text(products.length + ' produits');
    createProductsPage({products});
}


